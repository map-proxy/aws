{"version":3,"sources":["keys.js","dataProvider.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["PostActions","_ref","bulkActions","basePath","displayedFilters","currentSort","filters","exporter","filterValues","onUnselectItems","resource","selectedIds","showFilter","total","react_default","a","createElement","CardActions","React","cloneElement","context","CreateButton","Button_default","color","onClick","mapprovider","console","log","xmlHttp","XMLHttpRequest","open","localStorage","getItem","send","alert","responseText","KeyList","props","List","Object","assign","actions","keys_PostActions","Datagrid","TextField","source","label","style","KeyCreate","Create","SimpleForm","TextInput","KeyCreateHere","API_URL","dataProvider","type","params","fetchJson","fetchUtils","_convertDataProviderR","token","setItem","GET_LIST","query","jwtoken","url","concat","stringify","GET_ONE","id","GET_MANY","filter","JSON","ids","GET_MANY_REFERENCE","UPDATE","options","method","body","data","CREATE","queryt","DELETE_MANY","idsString","forEach","element","Error","convertDataProviderRequestToHTTP","then","response","status","document","location","href","json","map","x","parseInt","length","objectSpread","convertHTTPResponseToDataProvider","authProvider","AUTH_LOGIN","username","password","request","Request","headers","Headers","Content-Type","fetch","statusText","AUTH_LOGOUT","removeItem","Promise","resolve","App","Admin","Resource","name","list","create","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61d0c151.chunk.js","sourcesContent":["// in src/keys.js\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { List,Create,Edit, Datagrid, TextField,TextInput,DisabledInput,SimpleForm ,CardActions, CreateButton} from 'react-admin';\n\nconst PostActions = ({\n    bulkActions,\n    basePath,\n    currentSort,\n    displayedFilters,\n    exporter,\n    filters,\n    filterValues,\n    onUnselectItems,\n    resource,\n    selectedIds,\n    showFilter,\n    total\n}) => (\n    <CardActions>\n        {bulkActions && React.cloneElement(bulkActions, {\n            basePath,\n            filterValues,\n            resource,\n            selectedIds,\n            onUnselectItems,\n        })}\n        {filters && React.cloneElement(filters, {\n            resource,\n            showFilter,\n            displayedFilters,\n            filterValues,\n            context: 'button',\n        }) }\n        <CreateButton basePath={basePath} />\n        \n        <Button resource={resource} color=\"primary\" onClick={() => {\n            \n            let mapprovider = \"goog\"\n            switch(resource) {\n              case \"googles\":\n                mapprovider = \"goog\"\n                break;\n              case \"heres\":\n                mapprovider = \"here\"\n                break;\n              case \"tomtoms\":\n                mapprovider = \"tomt\"\n                break;\n              case \"bings\":\n                mapprovider = \"bing\"\n                break;\n              default:\n               mapprovider = \"goog\"\n            }\n            console.log(mapprovider);\n\n            var xmlHttp = new XMLHttpRequest();\n            xmlHttp.open( \"GET\", localStorage.getItem('sv')+'/settings/setprovider?provider='+mapprovider+'&jwtoken='+localStorage.getItem('token'), false ); // false for synchronous request\n            xmlHttp.send( null );\n            alert(xmlHttp.responseText);\n            return xmlHttp.responseText;\n\n                }}>Set Provider</Button>\n\n         <Button resource={resource} color=\"primary\" onClick={() => {\n           \n            var xmlHttp = new XMLHttpRequest();\n            xmlHttp.open( \"GET\", localStorage.getItem('sv')+'/settings/foceconfig?type=resetKey&jwtoken='+localStorage.getItem('token'), false ); // false for synchronous request\n            xmlHttp.send( null );\n            alert(xmlHttp.responseText);\n            return xmlHttp.responseText;\n\n                }}>Reset Key</Button>\n    </CardActions>\n);\n\nexport const KeyList = props => (\n    <List {...props} actions={<PostActions />}>\n        <Datagrid >\n            <TextField source=\"id\" label=\"Key\"/>\n            <TextField source=\"report.OK\" label=\"QUERY_OK\"/>\n            <TextField source=\"report.OVER_QUERY_LIMIT\" label=\"QUERY_LIMIT\" style={{color:'red'}}/>\n            <TextField source=\"status\" label=\"Status\"/>\n            \n        </Datagrid>\n    </List>\n);\nexport const KeyCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" label=\"Key\"/>\n        </SimpleForm>\n    </Create>\n);\nexport const KeyCreateHere = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" label=\"Key\"/>\n            <TextInput source=\"code\" />\n        </SimpleForm>\n    </Create>\n);\nexport const KeyEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n          <DisabledInput source=\"id\" label=\"Key\"/>\n        </SimpleForm>\n    </Edit>\n);\n","// in src/dataProvider\nimport {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE_MANY,\n    fetchUtils,\n} from 'react-admin';\nimport { stringify } from 'query-string';\nconsole.log(localStorage.getItem('sv') +'/public-api')\nvar API_URL = localStorage.getItem('sv') +'/public-api';\n\n/**\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} { url, options } The HTTP request parameters\n */\nconst convertDataProviderRequestToHTTP = (type, resource, params) => {\n    const token = localStorage.getItem('token');\n        if(localStorage.getItem('sv') == null){\n         localStorage.setItem('sv', \"https://maps.qupworld.com\");\n\n            API_URL = localStorage.getItem('sv') +'/public-api';\n        }\n    switch (type) {\n    case GET_LIST: {\n        const query = {\n            jwtoken: token\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case GET_ONE:\n        return { url: `${API_URL}/${resource}/${params.id}` };\n    case GET_MANY: {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n            jwtoken: token\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case GET_MANY_REFERENCE: {\n        const query = {\n            jwtoken: token\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case UPDATE:\n        return {\n            url: `${API_URL}/${resource}/${params.id}`,\n            options: { method: 'PUT', body: JSON.stringify(params.data) },\n        };\n    case CREATE:\n    const queryt = {\n            jwtoken: token\n        };\n        return {\n            url: `${API_URL}/${resource}?${stringify(queryt)}`,\n            options: { method: 'POST', body: JSON.stringify(params.data) },\n        };\n    case DELETE_MANY:\n    console.log(params)\n            var idsString = \"\"\n            params.ids.forEach(function(element) {\n                idsString += element + \";\";\n            });\n             const query = {\n            jwtoken: token\n        };\n        return {\n            url: `${API_URL}/${resource}/${idsString}?${stringify(query)}`,\n            options: { method: 'DELETE' },\n        };\n    default:\n        throw new Error(`Unsupported fetch action type ${type}`);\n    }\n};\n\n/**\n * @param {Object} response HTTP response from fetch()\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} Data Provider response\n */\nconst convertHTTPResponseToDataProvider = (response, type, resource, params) => {\n    console.log(response.status)\n    if (response.status < 200 || response.status >= 300) {\n        document.location.href=\"/\";\n    }\n    //document.location.href=\"/\";\n    const {  json } = response;\n    switch (type) {\n    case GET_LIST:\n        return {\n            data: json.map(x => x),\n            total: parseInt(json.length, 10),\n        };\n    case CREATE:\n        return { data: { ...params.data, id: json.id } };\n    default:\n        return { data: json };\n    }\n};\n\n/**\n * @param {string} type Request type, e.g GET_LIST\n * @param {string} resource Resource name, e.g. \"posts\"\n * @param {Object} payload Request parameters. Depends on the request type\n * @returns {Promise} the Promise for response\n */\nexport default (type, resource, params) => {\n    const { fetchJson } = fetchUtils;\n    const { url, options } = convertDataProviderRequestToHTTP(type, resource, params);\n    return fetchJson(url, options)\n        .then(response => convertHTTPResponseToDataProvider(response, type, resource, params));\n};","// in src/authProvider.js\nimport { AUTH_LOGIN ,AUTH_LOGOUT} from 'react-admin';\n\nexport default (type, params) => {\n    if (type === AUTH_LOGIN) {\n        const { username, password } = params;\n        const request = new Request(localStorage.getItem('sv') +'/authadmin/login', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        })\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                console.log(response);\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n            });\n    }\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    }\n    return Promise.resolve();\n}","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport { KeyList,KeyCreate,KeyCreateHere } from './keys';\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\n\nconst App = () => (\n    <Admin authProvider={authProvider} dataProvider={dataProvider} >\n        <Resource options={{ label: 'GOOGLE' }} name=\"googles\" list={KeyList} create={KeyCreate} />\n        <Resource options={{ label: 'HERE' }} name=\"heres\" list={KeyList} create={KeyCreateHere} />\n        {\n        \t/*\n        \t<Resource options={{ label: 'TOMTOM' }} name=\"tomtoms\" list={KeyList} create={KeyCreate}/>\n        <Resource options={{ label: 'BING' }} name=\"bings\" list={KeyList} create={KeyCreate}/>\n        \t*/\n        }\n        \n    </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n  \n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}